---
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
import Footer from '../components/Footer.astro';
---

<Layout title="💖 Programa para mi preciosa - Juan Teo" description="Calculadora Geométrica Web Edition Premium - Interactive tools created with love">
  <Navigation />
  
  <main class="pt-20">
    <!-- Header -->
    <div class="header">
      <h1>💖 Programa para mi preciosa</h1>
      <p>✨ Calculadora Geométrica Web Edition Premium ✨</p>
    </div>

    <!-- Main Content -->
    <div class="main-content">
      <!-- Panel de controles -->
      <div class="panel">
        <h3>🎮 CONTROLES</h3>
        
        <button class="btn btn-primary" onclick="calcularGeometria()" id="btnCalcular" disabled>
          🎯 Calcular Geometría
        </button>
        
        <button class="btn btn-danger" onclick="limpiarFigura()">
          🧹 Limpiar Canvas
        </button>
        
        <button class="btn btn-warning" onclick="guardarFigura()" id="btnGuardar" disabled>
          💾 Guardar Figura
        </button>

        <div class="stats-card">
          <h4>📊 INFORMACIÓN ACTUAL</h4>
          <div style="font-size: 14px;">
            <div>Puntos: <span id="puntosCount">0</span></div>
            <div>Estado: <span id="estadoFigura">Dibujando</span></div>
          </div>
        </div>

        <h4 style="margin-top: 20px; margin-bottom: 10px;">📚 HISTORIAL</h4>
        <div class="history-list" id="historialFiguras">
          <div style="text-align: center; opacity: 0.7; padding: 20px;">
            No hay figuras guardadas
          </div>
        </div>
        
        <button class="btn btn-info" onclick="cargarFiguraSeleccionada()" style="font-size: 12px;">
          📂 Cargar Seleccionada
        </button>
      </div>

      <!-- Canvas principal -->
      <div class="panel canvas-container">
        <h3>🎨 ÁREA DE DIBUJO INTERACTIVA</h3>
        <canvas id="gameCanvas" width="600" height="600"></canvas>
        
        <div class="instructions">
          <p>💡 <strong>Instrucciones:</strong></p>
          <p>• Haz clic en los puntos para dibujar</p>
          <p>• Conecta con el primer punto para cerrar la figura</p>
          <p>• ¡Disfruta creando geometría!</p>
        </div>
      </div>

      <!-- Panel de estadísticas -->
      <div class="panel">
        <h3>📈 RESULTADOS</h3>
        
        <div class="stats-card" style="background: linear-gradient(45deg, #4CAF50, #45a049);">
          <h4>🎯 ÁREA</h4>
          <div class="stats-value" id="resultadoArea">0.00 u²</div>
        </div>
        
        <div class="stats-card" style="background: linear-gradient(45deg, #ff9800, #f57c00);">
          <h4>📏 PERÍMETRO</h4>
          <div class="stats-value" id="resultadoPerimetro">0.00 u</div>
        </div>

        <div class="stats-card" style="background: linear-gradient(45deg, #2196F3, #1976D2);">
          <h4>📊 ESTADÍSTICAS</h4>
          <div style="font-size: 14px;">
            <div>Figuras creadas: <span id="figurasCreadas">0</span></div>
            <div>Área máxima: <span id="areaMaxima">0.00</span></div>
            <div>Mayor perímetro: <span id="perimetroMaximo">0.00</span></div>
          </div>
        </div>

        <h4 style="margin-top: 20px;">🏆 LOGROS</h4>
        <div id="logros" style="font-size: 12px; opacity: 0.8;">
          <div>🎯 Primera figura: Pendiente</div>
          <div>📐 Triángulo perfecto: Pendiente</div>
          <div>⬜ Cuadrado maestro: Pendiente</div>
          <div>🌟 Experto geómetra: Pendiente</div>
        </div>
      </div>
    </div>

    <!-- Footer -->
    <div class="footer">
      <p>💖 Creado con amor para mi preciosa • Web Technology • JavaScript + Canvas API</p>
      <p style="opacity: 0.7; margin-top: 5px;">© 2024 • Calculadora Geométrica Premium</p>
    </div>

    <!-- Notification -->
    <div id="notification" class="notification"></div>
  </main>
  
  <Footer />
</Layout>

<style>
  body {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    color: white;
  }

  .header {
    text-align: center;
    margin-bottom: 30px;
    padding: 20px;
    animation: glow 2s ease-in-out infinite alternate;
  }

  @keyframes glow {
    from { text-shadow: 0 0 20px #fff; }
    to { text-shadow: 0 0 30px #fff, 0 0 40px #667eea; }
  }

  .header h1 {
    font-size: 2.5rem;
    margin-bottom: 10px;
    background: linear-gradient(45deg, #fff, #f0f8ff);
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }

  .header p {
    font-size: 1.2rem;
    opacity: 0.9;
  }

  .main-content {
    display: grid;
    grid-template-columns: 300px 1fr 300px;
    gap: 20px;
    align-items: start;
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 20px;
  }

  .panel {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border-radius: 15px;
    padding: 20px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .panel h3 {
    margin-bottom: 20px;
    font-size: 1.3rem;
    text-align: center;
    color: #fff;
  }

  .canvas-container {
    text-align: center;
  }

  #gameCanvas {
    background: rgba(255, 255, 255, 0.95);
    border-radius: 10px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
    cursor: crosshair;
    transition: transform 0.2s ease;
  }

  #gameCanvas:hover {
    transform: scale(1.02);
  }

  .btn {
    width: 100%;
    padding: 12px 20px;
    margin: 8px 0;
    border: none;
    border-radius: 8px;
    font-size: 14px;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .btn-primary {
    background: linear-gradient(45deg, #4CAF50, #45a049);
    color: white;
  }

  .btn-danger {
    background: linear-gradient(45deg, #f44336, #d32f2f);
    color: white;
  }

  .btn-warning {
    background: linear-gradient(45deg, #ff9800, #f57c00);
    color: white;
  }

  .btn-info {
    background: linear-gradient(45deg, #2196F3, #1976D2);
    color: white;
  }

  .btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
  }

  .btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
  }

  .stats-card {
    background: rgba(255, 255, 255, 0.15);
    border-radius: 10px;
    padding: 15px;
    margin: 10px 0;
    text-align: center;
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); }
    100% { transform: scale(1); }
  }

  .stats-card h4 {
    font-size: 1.1rem;
    margin-bottom: 10px;
    color: #ffeb3b;
  }

  .stats-value {
    font-size: 1.8rem;
    font-weight: bold;
    font-family: 'Courier New', monospace;
  }

  .history-list {
    max-height: 200px;
    overflow-y: auto;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    padding: 10px;
  }

  .history-item {
    background: rgba(255, 255, 255, 0.1);
    padding: 8px;
    margin: 5px 0;
    border-radius: 5px;
    cursor: pointer;
    transition: background 0.3s ease;
  }

  .history-item:hover {
    background: rgba(255, 255, 255, 0.2);
  }

  .instructions {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 10px;
    padding: 15px;
    margin-top: 20px;
    text-align: center;
  }

  .footer {
    text-align: center;
    margin-top: 30px;
    padding: 20px;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 10px;
    max-width: 1400px;
    margin-left: auto;
    margin-right: auto;
  }

  .notification {
    position: fixed;
    top: 100px;
    right: 20px;
    padding: 15px 20px;
    border-radius: 8px;
    color: white;
    font-weight: bold;
    z-index: 1000;
    opacity: 0;
    transform: translateX(100%);
    transition: all 0.3s ease;
  }

  .notification.show {
    opacity: 1;
    transform: translateX(0);
  }

  .notification.success {
    background: linear-gradient(45deg, #4CAF50, #45a049);
  }

  .notification.error {
    background: linear-gradient(45deg, #f44336, #d32f2f);
  }

  .notification.info {
    background: linear-gradient(45deg, #2196F3, #1976D2);
  }

  /* Responsive design */
  @media (max-width: 1200px) {
    .main-content {
      grid-template-columns: 1fr;
      gap: 20px;
    }
    
    .canvas-container {
      order: 1;
    }
  }

  @media (max-width: 768px) {
    .header h1 {
      font-size: 2rem;
    }
    
    #gameCanvas {
      max-width: 100%;
      height: auto;
    }
    
    .main-content {
      padding: 0 10px;
    }
  }
</style>

<script is:inline>
  // Variables globales
  const canvas = document.getElementById('gameCanvas');
  const ctx = canvas ? canvas.getContext('2d') : null;
  const matrizSize = 30;
  const spacing = canvas ? canvas.width / (matrizSize - 1) : 20;
  
  let puntosFigura = [];
  let figuraCompleta = false;
  let figurasGuardadas = JSON.parse(localStorage.getItem('figurasGuardadas') || '[]');
  let puntoSeleccionado = null;
  let estadisticas = JSON.parse(localStorage.getItem('estadisticas') || '{"figurasCreadas":0,"areaMaxima":0,"perimetroMaximo":0}');

  // Inicialización
  document.addEventListener('DOMContentLoaded', function() {
    if (!canvas || !ctx) {
      console.error('Canvas no disponible');
      return;
    }
    
    dibujarMatriz();
    canvas.addEventListener('click', handleCanvasClick);
    canvas.addEventListener('mousemove', handleMouseMove);
    actualizarHistorial();
    actualizarEstadisticasDisplay();
    mostrarNotificacion('¡Bienvenida a tu calculadora geométrica! 💖', 'info');
  });

  function dibujarMatriz() {
    if (!ctx || !canvas) return;
    
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    // Fondo con gradiente
    const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);
    gradient.addColorStop(0, '#f8f9fa');
    gradient.addColorStop(1, '#e9ecef');
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    
    // Grid sutil
    ctx.strokeStyle = '#e9ecef';
    ctx.lineWidth = 1;
    for (let i = 0; i <= matrizSize; i++) {
      const pos = i * spacing;
      ctx.beginPath();
      ctx.moveTo(pos, 0);
      ctx.lineTo(pos, canvas.height);
      ctx.moveTo(0, pos);
      ctx.lineTo(canvas.width, pos);
      ctx.stroke();
    }
    
    // Dibujar puntos
    for (let i = 0; i < matrizSize; i++) {
      for (let j = 0; j < matrizSize; j++) {
        const x = j * spacing;
        const y = i * spacing;
        
        // Sombra del punto
        ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
        ctx.beginPath();
        ctx.arc(x + 2, y + 2, 6, 0, 2 * Math.PI);
        ctx.fill();
        
        // Punto principal
        const estaSeleccionado = puntosFigura.some(p => p.i === i && p.j === j);
        ctx.fillStyle = estaSeleccionado ? '#f44336' : '#667eea';
        ctx.strokeStyle = 'white';
        ctx.lineWidth = 2;
        ctx.beginPath();
        ctx.arc(x, y, estaSeleccionado ? 8 : 6, 0, 2 * Math.PI);
        ctx.fill();
        ctx.stroke();
      }
    }
    
    // Dibujar líneas de la figura
    if (puntosFigura.length > 1) {
      ctx.strokeStyle = '#f44336';
      ctx.lineWidth = 4;
      ctx.lineCap = 'round';
      ctx.lineJoin = 'round';
      
      // Sombra de las líneas
      ctx.shadowColor = 'rgba(0, 0, 0, 0.3)';
      ctx.shadowBlur = 3;
      ctx.shadowOffsetX = 2;
      ctx.shadowOffsetY = 2;
      
      ctx.beginPath();
      const primer = puntosFigura[0];
      ctx.moveTo(primer.j * spacing, primer.i * spacing);
      
      for (let k = 1; k < puntosFigura.length; k++) {
        const punto = puntosFigura[k];
        ctx.lineTo(punto.j * spacing, punto.i * spacing);
      }
      
      if (figuraCompleta) {
        ctx.closePath();
      }
      
      ctx.stroke();
      ctx.shadowColor = 'transparent';
    }
  }

  function handleCanvasClick(event) {
    const rect = canvas.getBoundingClientRect();
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;
    
    // Encontrar el punto más cercano
    const j = Math.round(x / spacing);
    const i = Math.round(y / spacing);
    
    if (i >= 0 && i < matrizSize && j >= 0 && j < matrizSize) {
      clickPunto(i, j);
    }
  }

  function handleMouseMove(event) {
    const rect = canvas.getBoundingClientRect();
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;
    
    const j = Math.round(x / spacing);
    const i = Math.round(y / spacing);
    
    if (i >= 0 && i < matrizSize && j >= 0 && j < matrizSize && !figuraCompleta) {
      canvas.style.filter = 'brightness(1.1)';
    } else {
      canvas.style.filter = 'brightness(1)';
    }
  }

  function clickPunto(i, j) {
    if (figuraCompleta) return;
    
    const punto = {i, j};
    const yaSeleccionado = puntosFigura.some(p => p.i === i && p.j === j);
    
    if (puntosFigura.length === 0) {
      // Primer punto
      puntosFigura.push(punto);
      animarPunto(i, j);
      actualizarInfo();
    } else if (yaSeleccionado && i === puntosFigura[0].i && j === puntosFigura[0].j && puntosFigura.length >= 3) {
      // Cerrar figura
      figuraCompleta = true;
      const btnCalcular = document.getElementById('btnCalcular');
      const btnGuardar = document.getElementById('btnGuardar');
      const estadoFigura = document.getElementById('estadoFigura');
      
      if (btnCalcular) btnCalcular.disabled = false;
      if (btnGuardar) btnGuardar.disabled = false;
      if (estadoFigura) estadoFigura.textContent = 'Completa ✅';
      
      animarFiguraCompleta();
      mostrarNotificacion('¡Figura completada! Ahora puedes calcular el área y perímetro 🎯', 'success');
    } else if (!yaSeleccionado) {
      // Nuevo punto
      puntosFigura.push(punto);
      animarPunto(i, j);
      actualizarInfo();
    }
    
    dibujarMatriz();
  }

  function animarPunto(i, j) {
    if (!ctx) return;
    
    const x = j * spacing;
    const y = i * spacing;
    
    let radio = 6;
    const animacion = setInterval(() => {
      ctx.fillStyle = '#4CAF50';
      ctx.beginPath();
      ctx.arc(x, y, radio, 0, 2 * Math.PI);
      ctx.fill();
      
      radio += 2;
      if (radio > 15) {
        clearInterval(animacion);
        dibujarMatriz();
      }
    }, 50);
  }

  function animarFiguraCompleta() {
    if (!ctx) return;
    
    let contador = 0;
    const colores = ['#4CAF50', '#ff9800', '#2196F3', '#f44336'];
    
    const animacion = setInterval(() => {
      puntosFigura.forEach((punto, index) => {
        setTimeout(() => {
          const x = punto.j * spacing;
          const y = punto.i * spacing;
          
          ctx.fillStyle = colores[contador % colores.length];
          ctx.beginPath();
          ctx.arc(x, y, 10, 0, 2 * Math.PI);
          ctx.fill();
        }, index * 100);
      });
      
      contador++;
      if (contador > 6) {
        clearInterval(animacion);
        dibujarMatriz();
      }
    }, 300);
  }

  function calcularGeometria() {
    if (puntosFigura.length < 3) {
      mostrarNotificacion('Necesitas al menos 3 puntos para formar una figura ⚠️', 'error');
      return;
    }
    
    mostrarNotificacion('Calculando geometría... 🧮', 'info');
    
    setTimeout(() => {
      // Calcular perímetro
      let perimetro = 0;
      for (let i = 0; i < puntosFigura.length; i++) {
        const actual = puntosFigura[i];
        const siguiente = puntosFigura[(i + 1) % puntosFigura.length];
        
        const dx = siguiente.j - actual.j;
        const dy = siguiente.i - actual.i;
        perimetro += Math.sqrt(dx * dx + dy * dy);
      }
      
      // Calcular área usando shoelace
      let area = 0;
      const n = puntosFigura.length;
      for (let i = 0; i < n; i++) {
        const j = (i + 1) % n;
        const x1 = puntosFigura[i].j;
        const y1 = puntosFigura[i].i;
        const x2 = puntosFigura[j].j;
        const y2 = puntosFigura[j].i;
        area += x1 * y2 - x2 * y1;
      }
      area = Math.abs(area) / 2;
      
      animarResultados(area, perimetro);
      actualizarEstadisticas(area, perimetro);
      verificarLogros(area, perimetro);
      
    }, 1000);
  }

  function animarResultados(area, perimetro) {
    const areaElement = document.getElementById('resultadoArea');
    const perimetroElement = document.getElementById('resultadoPerimetro');
    
    if (!areaElement || !perimetroElement) return;
    
    let currentArea = 0;
    let currentPerimetro = 0;
    const incrementoArea = area / 30;
    const incrementoPerimetro = perimetro / 30;
    
    const animacion = setInterval(() => {
      currentArea += incrementoArea;
      currentPerimetro += incrementoPerimetro;
      
      if (currentArea >= area) {
        currentArea = area;
        currentPerimetro = perimetro;
        clearInterval(animacion);
        mostrarNotificacion(`¡Cálculo completado! Área: ${area.toFixed(2)}u² • Perímetro: ${perimetro.toFixed(2)}u 🎉`, 'success');
      }
      
      areaElement.textContent = `${currentArea.toFixed(2)} u²`;
      perimetroElement.textContent = `${currentPerimetro.toFixed(2)} u`;
    }, 50);
  }

  function guardarFigura() {
    if (!figuraCompleta) {
      mostrarNotificacion('Completa la figura antes de guardarla ⚠️', 'error');
      return;
    }
    
    const areaEl = document.getElementById('resultadoArea');
    const perimetroEl = document.getElementById('resultadoPerimetro');
    
    if (!areaEl || !perimetroEl) return;
    
    const area = parseFloat(areaEl.textContent);
    const perimetro = parseFloat(perimetroEl.textContent);
    
    const figura = {
      puntos: [...puntosFigura],
      area: area,
      perimetro: perimetro,
      fecha: new Date().toLocaleString()
    };
    
    figurasGuardadas.push(figura);
    localStorage.setItem('figurasGuardadas', JSON.stringify(figurasGuardadas));
    actualizarHistorial();
    
    estadisticas.figurasCreadas++;
    localStorage.setItem('estadisticas', JSON.stringify(estadisticas));
    actualizarEstadisticasDisplay();
    
    mostrarNotificacion('¡Figura guardada exitosamente! 💾', 'success');
  }

  function actualizarHistorial() {
    const historial = document.getElementById('historialFiguras');
    if (!historial) return;
    
    if (figurasGuardadas.length === 0) {
      historial.innerHTML = '<div style="text-align: center; opacity: 0.7; padding: 20px;">No hay figuras guardadas</div>';
      return;
    }
    
    historial.innerHTML = '';
    figurasGuardadas.forEach((figura, index) => {
      const item = document.createElement('div');
      item.className = 'history-item';
      item.innerHTML = `
        <div style="font-weight: bold;">💎 Figura ${index + 1}</div>
        <div style="font-size: 12px; opacity: 0.8;">
          A: ${figura.area.toFixed(1)}u² • P: ${figura.perimetro.toFixed(1)}u
        </div>
      `;
      item.onclick = () => seleccionarFigura(index);
      historial.appendChild(item);
    });
  }

  function seleccionarFigura(index) {
    document.querySelectorAll('.history-item').forEach((item, i) => {
      item.style.background = i === index ? 'rgba(255, 255, 255, 0.3)' : 'rgba(255, 255, 255, 0.1)';
    });
    puntoSeleccionado = index;
  }

  function cargarFiguraSeleccionada() {
    if (puntoSeleccionado === null) {
      mostrarNotificacion('Selecciona una figura del historial ⚠️', 'error');
      return;
    }
    
    const figura = figurasGuardadas[puntoSeleccionado];
    limpiarFigura();
    
    puntosFigura = [...figura.puntos];
    figuraCompleta = true;
    
    let index = 0;
    const animacionCarga = setInterval(() => {
      if (index < puntosFigura.length) {
        animarPunto(puntosFigura[index].i, puntosFigura[index].j);
        index++;
      } else {
        clearInterval(animacionCarga);
        dibujarMatriz();
        
        const resultadoArea = document.getElementById('resultadoArea');
        const resultadoPerimetro = document.getElementById('resultadoPerimetro');
        const btnCalcular = document.getElementById('btnCalcular');
        const estadoFigura = document.getElementById('estadoFigura');
        
        if (resultadoArea) resultadoArea.textContent = `${figura.area.toFixed(2)} u²`;
        if (resultadoPerimetro) resultadoPerimetro.textContent = `${figura.perimetro.toFixed(2)} u`;
        if (btnCalcular) btnCalcular.disabled = false;
        if (estadoFigura) estadoFigura.textContent = 'Cargada ✅';
      }
    }, 200);
    
    mostrarNotificacion('Figura cargada correctamente 📂', 'success');
  }

  function limpiarFigura() {
    puntosFigura = [];
    figuraCompleta = false;
    
    const btnCalcular = document.getElementById('btnCalcular');
    const btnGuardar = document.getElementById('btnGuardar');
    const estadoFigura = document.getElementById('estadoFigura');
    const resultadoArea = document.getElementById('resultadoArea');
    const resultadoPerimetro = document.getElementById('resultadoPerimetro');
    
    if (btnCalcular) btnCalcular.disabled = true;
    if (btnGuardar) btnGuardar.disabled = true;
    if (estadoFigura) estadoFigura.textContent = 'Dibujando';
    if (resultadoArea) resultadoArea.textContent = '0.00 u²';
    if (resultadoPerimetro) resultadoPerimetro.textContent = '0.00 u';
    
    actualizarInfo();
    dibujarMatriz();
    
    mostrarNotificacion('Canvas limpiado 🧹', 'info');
  }

  function actualizarInfo() {
    const puntosCount = document.getElementById('puntosCount');
    if (puntosCount) puntosCount.textContent = puntosFigura.length;
  }

  function actualizarEstadisticas(area, perimetro) {
    if (area > estadisticas.areaMaxima) {
      estadisticas.areaMaxima = area;
    }
    
    if (perimetro > estadisticas.perimetroMaximo) {
      estadisticas.perimetroMaximo = perimetro;
    }
    
    localStorage.setItem('estadisticas', JSON.stringify(estadisticas));
    actualizarEstadisticasDisplay();
  }

  function actualizarEstadisticasDisplay() {
    const figurasCreadas = document.getElementById('figurasCreadas');
    const areaMaxima = document.getElementById('areaMaxima');
    const perimetroMaximo = document.getElementById('perimetroMaximo');
    
    if (figurasCreadas) figurasCreadas.textContent = estadisticas.figurasCreadas;
    if (areaMaxima) areaMaxima.textContent = estadisticas.areaMaxima.toFixed(2);
    if (perimetroMaximo) perimetroMaximo.textContent = estadisticas.perimetroMaximo.toFixed(2);
  }

  function verificarLogros(area, perimetro) {
    const logros = document.getElementById('logros');
    if (!logros) return;
    
    let logrosTexto = [];
    
    if (estadisticas.figurasCreadas >= 1) {
      logrosTexto.push('🎯 Primera figura: ¡Completado!');
    } else {
      logrosTexto.push('🎯 Primera figura: Pendiente');
    }
    
    if (puntosFigura.length === 3) {
      logrosTexto.push('📐 Triángulo perfecto: ¡Completado!');
    } else {
      logrosTexto.push('📐 Triángulo perfecto: Pendiente');
    }
    
    if (area > 50) {
      logrosTexto.push('⬜ Área grande: ¡Completado!');
    } else {
      logrosTexto.push('⬜ Cuadrado maestro: Pendiente');
    }
    
    if (estadisticas.figurasCreadas >= 5) {
      logrosTexto.push('🌟 Experto geómetra: ¡Completado!');
    } else {
      logrosTexto.push('🌟 Experto geómetra: Pendiente');
    }
    
    logros.innerHTML = logrosTexto.map(logro => `<div>${logro}</div>`).join('');
    
    // Verificar nuevos logros
    if (estadisticas.figurasCreadas === 1) {
      mostrarNotificacion('¡Nuevo logro desbloqueado! 🎯 Primera figura 🏆', 'success');
    }
    
    if (puntosFigura.length === 3) {
      mostrarNotificacion('¡Nuevo logro desbloqueado! 📐 Triángulo perfecto 🏆', 'success');
    }
    
    if (area > 50) {
      mostrarNotificacion('¡Nuevo logro desbloqueado! ⬜ Área grande 🏆', 'success');
    }
    
    if (estadisticas.figurasCreadas >= 5) {
      mostrarNotificacion('¡Nuevo logro desbloqueado! 🌟 Experto geómetra 🏆', 'success');
    }
  }

  function mostrarNotificacion(mensaje, tipo) {
    const notification = document.getElementById('notification');
    if (!notification) return;
    
    notification.textContent = mensaje;
    notification.className = `notification ${tipo} show`;
    
    setTimeout(() => {
      notification.classList.remove('show');
    }, 3000);
  }

  // Exponer funciones globalmente para uso en HTML
  window.calcularGeometria = calcularGeometria;
  window.limpiarFigura = limpiarFigura;
  window.guardarFigura = guardarFigura;
  window.cargarFiguraSeleccionada = cargarFiguraSeleccionada;
</script>
