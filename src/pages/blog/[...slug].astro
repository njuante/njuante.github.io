---
import Layout from '../../layouts/Layout.astro';
import Navigation from '../../components/Navigation.astro';
import Footer from '../../components/Footer.astro';
import { getCollection } from 'astro:content';

export async function getStaticPaths() {
  const blogEntries = await getCollection('blog');
  return blogEntries.map(entry => ({
    params: { slug: entry.slug }, props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();
---

<Layout 
  title={`${entry.data.title} - Juan Teo`} 
  description={entry.data.description}
>
  <Navigation />
  
  <main class="pt-20">
    <!-- Article Header -->
    <article class="max-w-4xl mx-auto px-6 py-16">
      <header class="mb-12">
        <div class="mb-6">
          <a 
            href="/blog" 
            class="inline-flex items-center text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 transition-colors"
          >
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
            Back to Blog
          </a>
        </div>
        
        <h1 class="text-4xl md:text-5xl font-bold text-gray-900 dark:text-white mb-6 leading-tight">
          {entry.data.title}
        </h1>
        
        <div class="flex items-center space-x-6 text-gray-600 dark:text-gray-400 mb-6">
          <div class="flex items-center space-x-2">
            <div class="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center text-white text-sm font-medium">
              JT
            </div>
            <span>{entry.data.author}</span>
          </div>
          
          <time datetime={typeof entry.data.pubDate === 'string' ? entry.data.pubDate : entry.data.pubDate.toISOString()}>
            {new Date(entry.data.pubDate).toLocaleDateString('en-US', {
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            })}
          </time>
        </div>
        
        {entry.data.tags && (
          <div class="flex flex-wrap gap-2">
            {entry.data.tags.map((tag: string) => (
              <span class="px-3 py-1 bg-blue-100 dark:bg-blue-900 text-blue-600 dark:text-blue-300 rounded-full text-sm">
                {tag}
              </span>
            ))}
          </div>
        )}
      </header>
      
      <!-- Article Content -->
      <div class="prose prose-lg dark:prose-invert max-w-none">
        <Content />
      </div>
      
      <!-- Article Footer -->
      <footer class="mt-16 pt-8 border-t border-gray-200 dark:border-gray-700">
        <div class="flex flex-col md:flex-row justify-between items-start md:items-center space-y-4 md:space-y-0">
          <div>
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">
              Enjoyed this article?
            </h3>
            <p class="text-gray-600 dark:text-gray-400">
              Follow me for more insights on web development and technology.
            </p>
          </div>
          
          <div class="flex space-x-4">
            <a 
              href="https://twitter.com/intent/tweet?text=Check out this article by @juanteo"
              target="_blank"
              rel="noopener noreferrer"
              class="inline-flex items-center space-x-2 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg transition-colors"
            >
              <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                <path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"/>
              </svg>
              <span>Share</span>
            </a>
            
            <a 
              href="/contact"
              class="inline-flex items-center space-x-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 px-4 py-2 rounded-lg transition-colors"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
              </svg>
              <span>Contact</span>
            </a>
          </div>
        </div>
      </footer>
    </article>
  </main>
  
  <Footer />
</Layout>

<style>
  /* Custom prose styles for better dark mode support */
  .prose {
    --tw-prose-body: #374151;
    --tw-prose-headings: #111827;
    --tw-prose-links: #2563eb;
    --tw-prose-bold: #111827;
    --tw-prose-counters: #6b7280;
    --tw-prose-bullets: #d1d5db;
    --tw-prose-hr: #e5e7eb;
    --tw-prose-quotes: #111827;
    --tw-prose-quote-borders: #e5e7eb;
    --tw-prose-captions: #6b7280;
    --tw-prose-code: #111827;
    --tw-prose-pre-code: #f3f4f6;
    --tw-prose-pre-bg: #111827;
    --tw-prose-th-borders: #d1d5db;
    --tw-prose-td-borders: #e5e7eb;
  }
  
  .prose :where(code):not(:where([class~="not-prose"] *)) {
    background-color: #f3f4f6;
    padding: 0.2em 0.4em;
    border-radius: 0.25rem;
    font-size: 0.875em;
  }
  
  .dark .prose :where(code):not(:where([class~="not-prose"] *)) {
    background-color: #1f2937;
    color: #e5e7eb;
  }
  
  .prose :where(pre):not(:where([class~="not-prose"] *)) {
    background-color: #111827;
    border-radius: 0.5rem;
    overflow-x: auto;
  }
  
  .prose :where(pre code):not(:where([class~="not-prose"] *)) {
    background-color: transparent;
    color: #f3f4f6;
    padding: 0;
  }
</style>
